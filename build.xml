<?xml version="1.0"?>
<project name="ENOM PRO!" default="deploy">
	<property name="name" value="eNom PRO"/>
	<property name="version" value="2.1.0"/>
	<property name="build_dir" value="/Volumes/Build/enom_pro"/>
	<property name="build_temp_dir" value="./build"/>
	<property name="src_dir" value="./src"/>
	<property name="version_xml" value="enom_pro_version.xml"/>
	<property name="deploy" value="/Users/robertgregor/Sites/whmcs" />
	<!-- Location to save the encoded version -->
	<property name="encoded" value="${build_dir}/encoded"/>
	<property name="encoded_prep" value="${build_dir}/encoded_prep"/>
	<property name="ftp.password" value="vRki3ozG08Tt"/>
	<property name="enc.secret" value="***REMOVED***"/><!-- Secret -->
    <!-- FILESETS -->
    <fileset dir="${src_dir} " id="open_files">
        <include name="**/.php" />
        <include name="**/.xml" />
        <include name="**/.css" />
        <include name="**/.js" />
        <include name="**/.tpl" />
        <include name="**/images/**" />
        <include name="README.txt" />
        <include name="EULA.txt" />
        <exclude name="*.svn" />
        <exclude name="*.git" />
        <exclude name=".project" />
        <exclude name=".buildpath" />
        <exclude name=".settings/*" />
    </fileset>
    <fileset dir="${encoded}" id="encoded">
        <exclude name="${version_xml}"/>
    	<include name="**/**" />
    </fileset>
	   <target name="clean" description="Cleans up the build directory">
	        <delete dir="${build_temp_dir}" />
	        <mkdir dir="${build_temp_dir}/api" />
	        <mkdir dir="${build_temp_dir}/code-browser" />
	        <mkdir dir="${build_temp_dir}/coverage" />
	        <mkdir dir="${build_temp_dir}/logs" />
	        <mkdir dir="${build_temp_dir}/pdepend" />
	    </target>
	<target name="run_parallel_tasks">
	        <parallel threadCount="${threads}">
	            <phingcall target="tasks_to_try" />
	        </parallel>
	    </target>
	    <target name="run_serial_tasks">
	        <phingcall target="tasks_to_try" />
	    </target>
	    <target name="tasks_to_try">
	        <phingcall target="pdepend" />
	        <phingcall target="phpmd" />
	        <phingcall target="phpcpd" />
	        <phingcall target="phpcs" />
	        <phingcall target="phpdoc" />
	        <phingcall target="phploc" />
	    </target>
	    <target name="try_ParallelTasks" description="Run the pdepend, phpmd, phpcpd, phpcs, phpdoc and phploc tasks. Checks for parallel support in PHP.">
	        <exec command="php -m | grep pcntl" returnProperty="pcntl_enabled"/>
	        <if>
	            <equals arg1="${pcntl_enabled}" arg2="pcntl" />
	            <then>
	                <echo message="PCNTL Enabled. Running Taks in parallel with ${threads} threads." />
	                <phingcall target="run_parallel_tasks"/>
	            </then>
	            <else>
	                <echo message="PCNTL is not enabled. Running task serially." />
	                <phingcall target="run_serial_tasks"/>
	            </else>
	        </if>
	    </target>
	    
	    <target name="phpunit" description="Run unit tests using PHPUnit and generates junit.xml and clover.xml">
	            <echo msg="Running unit tests"/>
	            <exec logoutput="true" command="phpunit --stop-on-failure --configuration=phpunit.xml --coverage-html ${build_temp_dir}/coverage --coverage-clover build/logs/clover.xml --log-junit build/logs/junit.xml" />
	    </target>
	    
	    <target name="pdepend" description="Generate jdepend.xml and software metrics charts using PHP_Depend">
	        <exec logoutput="true" command="pdepend --jdepend-xml=${build_temp_dir}/logs/jdepend.xml --jdepend-chart=${build_temp_dir}/pdepend/dependencies.svg --overview-pyramid=${build_temp_dir}/pdepend/overview-pyramid.svg ${src_dir}" />
	    </target>

	    <target name="phpmd" description="Generate pmd.xml using PHPMD">
	        <exec logoutput="true" spawn="true" command="phpmd ${src_dir} xml codesize,design,naming,unusedcode --reportfile ${build_temp_dir}/logs/pmd.xml" />
	    </target>

	    <target name="phpcpd" description="Generate pmd-cpd.xml using PHPCPD">
	        <exec logoutput="true" command="phpcpd --log-pmd ${build_temp_dir}/logs/pmd-cpd.xml ${src_dir}" />
	    </target>

	    <target name="phploc" description="Generate phploc.csv">
	        <exec logoutput="true" command="phploc --log-csv ${build_temp_dir}/logs/phploc.csv ${src_dir}" />
	    </target>

	    <target name="phpcs" description="Generate checkstyle.xml using PHP_CodeSniffer">
	        <exec logoutput="true" command="phpcs --report=checkstyle --report-file=${build_temp_dir}/logs/checkstyle.xml --standard=PSR2 ${src_dir}" />
	    </target>

	    <target name="phpdoc" description="Generate API documentation using PHPDocumentor">
	        <exec logoutput="true" command="phpdoc -d ${src_dir} -t ${build_temp_dir}/api" />
	    </target>

	    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
	        <exec logoutput="true" command="phpcb --log ${build_temp_dir}/logs --source ${src_dir} --output ${build_temp_dir}/code-browser" />
	    </target>
	    <target name="ci" depends="clean,phpunit,try_ParallelTasks,phpcb" />
    <target name="deploy">
    	<echo msg="Cleaning up any failed builds"/>
    	
    	<echo msg="Running Unit Tests"/>
    	<phpunit configuration="phpunit.xml" printsummary="true">
    		<batchtest>
    			<fileset dir="tests">
    				<include name="*.php"/>
    			</fileset>
    		</batchtest>
    	</phpunit>
    	<delete dir="${build_dir}" includeemptydirs="true" failonerror="false"/>
   		<mkdir dir="${build_dir}" />
   		<mkdir dir="${encoded}" />
    	<echo msg="Copying files from src to encoded_prep &amp; replacing tokens"/>
        <copy todir="${encoded_prep}">
        	<filterchain>
        		<replacetokens>
        			<token key="SECRET" value="${enc.secret}"/>
        			<token key="VERSION" value="${version}"/>
	       			<token key="NAME" value="${name}"/>
        		</replacetokens>
        	</filterchain>
        	<fileset refid="open_files"/>
        </copy>
        <ioncubeencoder obfuscate="linenos" optimize="max" ioncubepath="/Users/robertgregor/" targetoption="replace" fromdir="${encoded_prep}" todir="${encoded}">
    			<comment>*************************************************************************</comment>
				<comment>* enom PRO Addon for WHMCS                                              *</comment>
				<comment>* Copyright (c) 2001-2013 Orion IP Ventures, LLC. All Rights Reserved   *</comment>
				<comment>*************************************************************************</comment>
				<comment>* Licenses Resold and Supported by Circle Tree, LLC                     *</comment>
				<comment>* For More Information on Becoming an Orion IP Authorized Reseller      *</comment>
				<comment>* Visit Our Website: http://www.OrionIPVentures.com/                    *</comment>
				<comment>*************************************************************************</comment>
				<comment>* The use of this software means that you accept the terms and          *</comment>
				<comment>* conditions of the license, and agree to be bound by the terms set     *</comment>
				<comment>* forth in the End User License Agreement (EULA). Each purchased        *</comment>
				<comment>* license entitles you, the named account holder, to one installation.  *</comment>
				<comment>* You may not use the license for anyone other than the named person    *</comment>
				<comment>* on the account, you may transfer the license after it has been        *</comment>
				<comment>* approved by Orion IP Ventures, LLC. We may at any time terminate      *</comment>
				<comment>* your license to use our software if you do not abide by the terms     *</comment>
				<comment>* set out in the EULA. In this event, licensee agrees to return         *</comment>
				<comment>* licensor or destroy all copies of software upon termination of the    *</comment>
				<comment>* license.                                                              *</comment>
				<comment>*************************************************************************</comment>
				<comment>*  You may not alter, merge, modify, adapt or translate the Software,   *</comment>
				<comment>* or decompile, reverse engineer, disassemble, defeat licensing         *</comment>
				<comment>* mechanisms, or otherwise reduce the Software to a human-perceivable   *</comment>
				<comment>* form                                                                  *</comment>
				<comment>*************************************************************************</comment>
				<comment>* Please see included EULA.txt for the full End User License Agreement. *</comment>
				<comment>*************************************************************************</comment>
    	</ioncubeencoder>
    	<echo msg="Copying encoded files to local WHMCS install" />
        <copy todir="${deploy}">
        	<fileset refid="encoded" />
        </copy>
    </target>
	<target name="release" depends="zip">
        <copy todir="${encoded_prep}">
        	<filterchain>
        		<replacetokens>
        			<token key="SECRET" value="${enc.secret}"/>
        			<token key="VERSION" value="${version}"/>
	       			<token key="NAME" value="${name}"/>
        		</replacetokens>
        	</filterchain>
        	<fileset dir="${project.basedir}">
				<include name="${version_xml}"/>
        	</fileset>
        </copy>
		    <echo msg="Deploying XML to myCircleTree.com"/>
	    	<ftpdeploy 
	  				host="mycircletree.com"
	  				port="21"
			  		username="mycircle"
					password="${ftp.password}" 
					dir="/public_html/versions/"
					passive="false"
					level="debug"
					mode="ascii">				
	  			<fileset dir="${encoded_prep}">
	  				<include name="${version_xml}"/>
	  			</fileset>
	  		</ftpdeploy>
			<echo msg="Deploying zipfiles to myCircleTree.com"/>
		    	<ftpdeploy 
		  				host="mycircletree.com"
		  				port="21"
				  		username="mycircle"
						password="${ftp.password}" 
						dir="/downloads/"
						passive="false"
						level="debug"
						mode="binary">				
		  			<fileset dir=".">
						<include name="enom_pro.zip"/>
						<include name="enom_pro_open.zip"/>
		  			</fileset>
		  		</ftpdeploy>
    </target>
	<target name="zip" depends="deploy">
    	<echo msg="Creating Zip files from encoded &amp; encoded_prep" />
		<zip destfile="enom_pro.zip" basedir="${encoded}"/>
		<zip destfile="enom_pro_open.zip" basedir="${encoded_prep}"/>
	</target>
</project>
